{"version":3,"sources":["store/reducer.js","store/index.js","TodoList.js","index.js"],"names":["defaultState","inputValue","listItem","store","createStore","state","arguments","length","undefined","action","newState","JSON","parse","stringify","type","value","push","done","splice","index","map","item","i","window","__REDUX_DEVTOOLS_EXTENSION__","TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","storeChange","setState","getState","changeInput","e","target","dispatch","addItem","indexAdd","current","delateItem","changestate","editInput","editInputEle","editIndexRef","editpEle","editpRef","console","log","style","display","toList","React","createRef","subscribe","_this2","react_default","a","createElement","required","onChange","ref","className","onClick","id","key","merginTop","onBlur","checked","Component","ReactDOM","render","src_TodoList","document","getElementById"],"mappings":"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","file":"static/js/main.b612219d.chunk.js","sourcesContent":["//管理状态,处理业务逻辑,action会通过store自动推送到reducer\r\nconst defaultState = {\r\n  inputValue: \"To Do Something\",\r\n  listItem: []\r\n};\r\nexport default (state = defaultState, action) => {\r\n  let newState = JSON.parse(JSON.stringify(state)); //深度拷贝\r\n  //reducer里只能接收state,不能改变state，需要定义一个中间变量\r\n  switch (action.type) {\r\n    case \"inputChange\":\r\n      newState.inputValue = action.value;\r\n      return newState;\r\n    case \"itemAdd\":\r\n      newState.listItem.push({\r\n        value: action.value,\r\n        done: action.done\r\n      });\r\n      return newState;\r\n    case \"itemDelate\":\r\n      newState.listItem.splice(action.index, 1);\r\n      return newState;\r\n    case \"stateChange\":\r\n      newState.listItem = newState.listItem.map((item, i) => {\r\n        if (i === action.index) item.done = action.state;\r\n        return item;\r\n      });\r\n      return newState;\r\n    case \"editData\":\r\n      let index = action.index\r\n      let value = action.value\r\n      newState.listItem = newState.listItem.map((item, i) => {\r\n        if (i === index) item.value = value;\r\n        return item;\r\n      });\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","//store 状态管理文件夹\r\n//仓库管理文件\r\nimport { createStore } from \"redux\";\r\nimport reducer from './reducer';\r\n\r\n//创建store\r\nconst store = createStore(\r\n    reducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n\r\nexport default store;","import React, { Component } from \"react\";\nimport store from \"./store\";\nimport \"./todolist.css\";\n\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.indexAdd = React.createRef()\n    this.editIndexRef = React.createRef()\n    this.editpRef = React.createRef()\n    this.state = store.getState();\n    store.subscribe(this.storeChange); //开启订阅，监听变化\n  }\n\n  storeChange = () => {\n    this.setState(store.getState());\n  };\n\n  changeInput = e => {\n    const action = {\n      type: \"inputChange\",\n      value: e.target.value\n    };\n    store.dispatch(action);\n  };\n\n  addItem = () => {\n    let value = this.indexAdd.current.value\n    const action = { \n      type: \"itemAdd\" ,\n      value: value,\n      done:false\n    };\n    store.dispatch(action);\n  };\n\n  delateItem = index => {\n    const action = { type: \"itemDelate\", index: index };\n    store.dispatch(action);\n  };\n\n  changestate = (index,state) => {\n    const action = { type: \"stateChange\", index: index,state:state };\n    store.dispatch(action);\n  };\n\n  editInput = () =>{\n    let editInputEle = this.editIndexRef.current;\n    let editpEle = this.editpRef.current;\n    console.log(editpEle,editInputEle)\n    editInputEle.style.display = 'block';\n    editpEle.style.display = 'none';\n  }\n  toList=(index)=>{\n    let editInputEle = this.editIndexRef.current;\n    let editpEle = this.editpRef.current;\n    editpEle.style.display = 'block';\n    editInputEle.style.display = 'none';\n    let value = editInputEle.value\n    store.dispatch({type: \"editData\",index,value});\n  }\n  render() {\n    return (\n      <div>\n        <header>\n          <section>\n            <label>ToDoList</label>\n            <input\n              type=\"text\"\n              value={this.state.inputValue}\n              required=\"required\"\n              onChange={this.changeInput}\n              ref={this.indexAdd}\n            />\n            <button className=\"addBtn\" onClick={this.addItem}>\n              add\n            </button>\n          </section>\n        </header>\n        <section>\n          <h3>正在进行</h3>\n          {/* <Todo items={this.state.listItem} /> */}\n          <ul id=\"todolist\">\n            {this.state.listItem.map((item, index) => {\n              if(item.done === true) return;\n              return (\n                <li key={index}>\n                  <input\n                    type=\"checkbox\"\n                    onClick={() => this.changestate(index,true)}\n                  />\n                  {/* <p>{this.state.inputValue}</p> */}\n                  <p onClick={() => {this.editInput()}} ref={this.editpRef}>{item.value}</p>\n                  <input ref={this.editIndexRef} type=\"text\" style={{display:\"none\",merginTop:'2px'}} \n                  onBlur={()=>{this.toList(index)}}/>\n                  <span\n                    className=\"del\"\n                    onClick={() => {\n                      this.delateItem(index);\n                    }}\n                  >\n                    -\n                  </span>\n                </li>\n              );\n            })}\n          </ul>\n          <h3>已经完成</h3>\n          <ul id=\"donelist\" >\n          {this.state.listItem.map((item, index) => {\n            if(item.done !== true) return;\n              return (\n                <li key={index}>\n                  <input\n                   checked\n                    type=\"checkbox\"\n                    onClick={() => this.changestate(index,false)}\n                  />\n                  {/* <p>{this.state.inputValue}</p> */}\n                  <p>{item.value}</p>\n                  <span\n                    className=\"del\"\n                    onClick={() => {\n                      this.delateItem(index);\n                    }}\n                  >\n                    -\n                  </span>\n                </li>\n              );\n            })}\n          </ul>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './TodoList';\n\n\n    ReactDOM.render(<TodoList />, document.getElementById('root'));\n\n"],"sourceRoot":""}